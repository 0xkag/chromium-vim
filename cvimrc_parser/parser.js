RCParser = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { Start: peg$parseStart },
        peg$startRuleFunction  = peg$parseStart,

        peg$c0 = function(a) { return parseScope(a); },
        peg$c1 = /^[^.]/,
        peg$c2 = { type: "class", value: "[^.]", description: "[^.]" },
        peg$c3 = /^[\t ]/,
        peg$c4 = { type: "class", value: "[\\t ]", description: "[\\t ]" },
        peg$c5 = void 0,
        peg$c6 = peg$FAILED,
        peg$c7 = { type: "any", description: "any character" },
        peg$c8 = [],
        peg$c9 = /^[\n]/,
        peg$c10 = { type: "class", value: "[\\n]", description: "[\\n]" },
        peg$c11 = null,
        peg$c12 = function() { return ''; },
        peg$c13 = "let",
        peg$c14 = { type: "literal", value: "let", description: "\"let\"" },
        peg$c15 = "remap",
        peg$c16 = { type: "literal", value: "remap", description: "\"remap\"" },
        peg$c17 = "map",
        peg$c18 = { type: "literal", value: "map", description: "\"map\"" },
        peg$c19 = "imap",
        peg$c20 = { type: "literal", value: "imap", description: "\"imap\"" },
        peg$c21 = "unmap",
        peg$c22 = { type: "literal", value: "unmap", description: "\"unmap\"" },
        peg$c23 = "iunmap",
        peg$c24 = { type: "literal", value: "iunmap", description: "\"iunmap\"" },
        peg$c25 = "set",
        peg$c26 = { type: "literal", value: "set", description: "\"set\"" },
        peg$c27 = "site",
        peg$c28 = { type: "literal", value: "site", description: "\"site\"" },
        peg$c29 = /^[a-zA-Z_]/,
        peg$c30 = { type: "class", value: "[a-zA-Z_]", description: "[a-zA-Z_]" },
        peg$c31 = function(a) { return a.join(''); },
        peg$c32 = "\"",
        peg$c33 = { type: "literal", value: "\"", description: "\"\\\"\"" },
        peg$c34 = /^[^\n]/,
        peg$c35 = { type: "class", value: "[^\\n]", description: "[^\\n]" },
        peg$c36 = "\\",
        peg$c37 = { type: "literal", value: "\\", description: "\"\\\\\"" },
        peg$c38 = function() { return null; },
        peg$c39 = function(b) { return b || null; },
        peg$c40 = function(a, b) { return [a[0]].concat(b); },
        peg$c41 = function(a) { return a; },
        peg$c42 = /^[^"\n]/,
        peg$c43 = { type: "class", value: "[^\"\\n]", description: "[^\"\\n]" },
        peg$c44 = "'",
        peg$c45 = { type: "literal", value: "'", description: "\"'\"" },
        peg$c46 = /^[^'\n]/,
        peg$c47 = { type: "class", value: "[^'\\n]", description: "[^'\\n]" },
        peg$c48 = ",",
        peg$c49 = { type: "literal", value: ",", description: "\",\"" },
        peg$c50 = "]",
        peg$c51 = { type: "literal", value: "]", description: "\"]\"" },
        peg$c52 = function(a, b) { return [a].concat(b); },
        peg$c53 = function(a) { return [a]; },
        peg$c54 = "[",
        peg$c55 = { type: "literal", value: "[", description: "\"[\"" },
        peg$c56 = function() { return []; },
        peg$c57 = /^[1-9]/,
        peg$c58 = { type: "class", value: "[1-9]", description: "[1-9]" },
        peg$c59 = /^[0-9]/,
        peg$c60 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c61 = function(a, b) { return parseInt(a.join('') + b.join(''), 10); },
        peg$c62 = "0",
        peg$c63 = { type: "literal", value: "0", description: "\"0\"" },
        peg$c64 = function() { return 0; },
        peg$c65 = ".",
        peg$c66 = { type: "literal", value: ".", description: "\".\"" },
        peg$c67 = function(a, b) { return a + parseFloat('.' + b.join('')); },
        peg$c68 = "{",
        peg$c69 = { type: "literal", value: "{", description: "\"{\"" },
        peg$c70 = "\n",
        peg$c71 = { type: "literal", value: "\n", description: "\"\\n\"" },
        peg$c72 = "}",
        peg$c73 = { type: "literal", value: "}", description: "\"}\"" },
        peg$c74 = function(a, b) {
            var result = {
              sites: {}
            };
            result.sites[a] = parseScope(b);
            console.log(b);
            return result;
          },
        peg$c75 = "=",
        peg$c76 = { type: "literal", value: "=", description: "\"=\"" },
        peg$c77 = function(a, b, c) {
            var result = {};
            a += a.charAt(a.length - 1) === 's' ? 'es' : 's';
            result[a] = {};
            result[a][b] = c;
            return result;
          },
        peg$c78 = function(a, b) { var result = {}; result[a] = b; return result; },
        peg$c79 = /^[^ ]/,
        peg$c80 = { type: "class", value: "[^ ]", description: "[^ ]" },
        peg$c81 = function(a, b, c) {
            return {
              MAPPINGS: [a, b.join(''), c.join('')].join(' ')
            };
          },
        peg$c82 = /^[^ \n]/,
        peg$c83 = { type: "class", value: "[^ \\n]", description: "[^ \\n]" },
        peg$c84 = function(a, b) {
            return {
              MAPPINGS: [a, b.join('')].join(' ')
            };
          },
        peg$c85 = "no",
        peg$c86 = { type: "literal", value: "no", description: "\"no\"" },
        peg$c87 = function(a) { var result = {}; result[a] = false; return result; },
        peg$c88 = function(a) { var result = {}; result[a] = true; return result; },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parseStart() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseScope();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c0(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseANY() {
      var s0;

      if (peg$c1.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c2); }
      }

      return s0;
    }

    function peg$parseWS() {
      var s0;

      if (peg$c3.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c4); }
      }

      return s0;
    }

    function peg$parseEOF() {
      var s0, s1;

      s0 = peg$currPos;
      peg$silentFails++;
      if (input.length > peg$currPos) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c7); }
      }
      peg$silentFails--;
      if (s1 === peg$FAILED) {
        s0 = peg$c5;
      } else {
        peg$currPos = s0;
        s0 = peg$c6;
      }

      return s0;
    }

    function peg$parseEOL() {
      var s0, s1;

      s0 = [];
      if (peg$c9.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c10); }
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          if (peg$c9.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c10); }
          }
        }
      } else {
        s0 = peg$c6;
      }

      return s0;
    }

    function peg$parseEND() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseWS();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseWS();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseComment();
        if (s2 === peg$FAILED) {
          s2 = peg$c11;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseEOL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c6;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c6;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c6;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseEOF();
      }

      return s0;
    }

    function peg$parseWSB() {
      var s0, s1;

      s0 = peg$parseWS();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseBreak();
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c12();
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseLET() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c13) {
        s0 = peg$c13;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c14); }
      }

      return s0;
    }

    function peg$parseMAP() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c15) {
        s0 = peg$c15;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c16); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c17) {
          s0 = peg$c17;
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c18); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c19) {
            s0 = peg$c19;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c20); }
          }
        }
      }

      return s0;
    }

    function peg$parseUNMAP() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c21) {
        s0 = peg$c21;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c22); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c23) {
          s0 = peg$c23;
          peg$currPos += 6;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c24); }
        }
      }

      return s0;
    }

    function peg$parseSET() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c25) {
        s0 = peg$c25;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c26); }
      }

      return s0;
    }

    function peg$parseSITE() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c27) {
        s0 = peg$c27;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c28); }
      }

      return s0;
    }

    function peg$parseVARLETTER() {
      var s0;

      if (peg$c29.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c30); }
      }

      return s0;
    }

    function peg$parseVAR() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseVARLETTER();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseVARLETTER();
        }
      } else {
        s1 = peg$c6;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c31(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseComment() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 34) {
        s1 = peg$c32;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c33); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c34.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c35); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c34.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c35); }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c6;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c6;
      }

      return s0;
    }

    function peg$parseBreak() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (peg$c9.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c10); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseWS();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseWS();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 92) {
            s3 = peg$c36;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c37); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c12();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c6;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c6;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c6;
      }

      return s0;
    }

    function peg$parseScope() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseWS();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseWS();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseEOF();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c38();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c6;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c6;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c6;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parseWS();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseWS();
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseEOL();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseScope();
            if (s3 === peg$FAILED) {
              s3 = peg$parseEOF();
            }
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c39(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c6;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c6;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c6;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parseWS();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parseWS();
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parseExpression();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseEND();
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c6;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c6;
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parseWS();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parseWS();
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseScope();
                if (s4 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c40(s2, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c6;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c6;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c6;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c6;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parseWS();
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parseWS();
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseExpression();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseEND();
                if (s3 !== peg$FAILED) {
                  s4 = [];
                  s5 = peg$parseWS();
                  while (s5 !== peg$FAILED) {
                    s4.push(s5);
                    s5 = peg$parseWS();
                  }
                  if (s4 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c41(s2);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c6;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c6;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c6;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c6;
            }
          }
        }
      }

      return s0;
    }

    function peg$parseStringEscape() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c36;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c37); }
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c7); }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c41(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c6;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c6;
      }

      return s0;
    }

    function peg$parseString() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = [];
      if (input.charCodeAt(peg$currPos) === 34) {
        s2 = peg$c32;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c33); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (input.charCodeAt(peg$currPos) === 34) {
            s2 = peg$c32;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c33); }
          }
        }
      } else {
        s1 = peg$c6;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseStringEscape();
        if (s3 === peg$FAILED) {
          s3 = peg$parseBreak();
          if (s3 === peg$FAILED) {
            if (peg$c42.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c43); }
            }
          }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseStringEscape();
          if (s3 === peg$FAILED) {
            s3 = peg$parseBreak();
            if (s3 === peg$FAILED) {
              if (peg$c42.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c43); }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 34) {
            s3 = peg$c32;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c33); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c31(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c6;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c6;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c6;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        if (input.charCodeAt(peg$currPos) === 39) {
          s2 = peg$c44;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c45); }
        }
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            if (input.charCodeAt(peg$currPos) === 39) {
              s2 = peg$c44;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c45); }
            }
          }
        } else {
          s1 = peg$c6;
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseStringEscape();
          if (s3 === peg$FAILED) {
            s3 = peg$parseBreak();
            if (s3 === peg$FAILED) {
              if (peg$c46.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c47); }
              }
            }
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseStringEscape();
            if (s3 === peg$FAILED) {
              s3 = peg$parseBreak();
              if (s3 === peg$FAILED) {
                if (peg$c46.test(input.charAt(peg$currPos))) {
                  s3 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c47); }
                }
              }
            }
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 39) {
              s3 = peg$c44;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c45); }
            }
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c31(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c6;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c6;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c6;
        }
      }

      return s0;
    }

    function peg$parseArrayLoop() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseWSB();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseWSB();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseObject();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseWSB();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseWSB();
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s4 = peg$c48;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c49); }
            }
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parseWSB();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parseWSB();
              }
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 93) {
                  s6 = peg$c50;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c51); }
                }
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c41(s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c6;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c6;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c6;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c6;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c6;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c6;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parseWSB();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseWSB();
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseObject();
          if (s2 !== peg$FAILED) {
            s3 = [];
            s4 = peg$parseWSB();
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parseWSB();
            }
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 44) {
                s4 = peg$c48;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c49); }
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parseArrayLoop();
                if (s5 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c52(s2, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c6;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c6;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c6;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c6;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c6;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parseWSB();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parseWSB();
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseObject();
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parseWSB();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parseWSB();
              }
              if (s3 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 93) {
                  s4 = peg$c50;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c51); }
                }
                if (s4 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c53(s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c6;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c6;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c6;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c6;
          }
        }
      }

      return s0;
    }

    function peg$parseArray() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c54;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c55); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseArrayLoop();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c41(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c6;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c6;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 91) {
          s1 = peg$c54;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c55); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseWSB();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseWSB();
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 93) {
              s3 = peg$c50;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c51); }
            }
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c56();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c6;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c6;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c6;
        }
      }

      return s0;
    }

    function peg$parseInteger() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c57.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c58); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c57.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c58); }
          }
        }
      } else {
        s1 = peg$c6;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c59.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c60); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c59.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c60); }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c61(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c6;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c6;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 48) {
          s1 = peg$c62;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c63); }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c64();
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseDecimal() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseInteger();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s2 = peg$c65;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c66); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          if (peg$c59.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c60); }
          }
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              if (peg$c59.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c60); }
              }
            }
          } else {
            s3 = peg$c6;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c67(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c6;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c6;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c6;
      }

      return s0;
    }

    function peg$parseNumber() {
      var s0;

      s0 = peg$parseDecimal();
      if (s0 === peg$FAILED) {
        s0 = peg$parseInteger();
      }

      return s0;
    }

    function peg$parseObject() {
      var s0;

      s0 = peg$parseString();
      if (s0 === peg$FAILED) {
        s0 = peg$parseArray();
        if (s0 === peg$FAILED) {
          s0 = peg$parseNumber();
        }
      }

      return s0;
    }

    function peg$parseExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseWSB();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseWSB();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSITE();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseWSB();
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parseWSB();
            }
          } else {
            s3 = peg$c6;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseString();
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parseWSB();
              if (s6 !== peg$FAILED) {
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parseWSB();
                }
              } else {
                s5 = peg$c6;
              }
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 123) {
                  s6 = peg$c68;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c69); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = [];
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s8 = peg$c70;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c71); }
                  }
                  if (s8 === peg$FAILED) {
                    s8 = peg$parseWS();
                  }
                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    if (input.charCodeAt(peg$currPos) === 10) {
                      s8 = peg$c70;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c71); }
                    }
                    if (s8 === peg$FAILED) {
                      s8 = peg$parseWS();
                    }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseScope();
                    if (s8 !== peg$FAILED) {
                      s9 = [];
                      s10 = peg$parseEND();
                      while (s10 !== peg$FAILED) {
                        s9.push(s10);
                        s10 = peg$parseEND();
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = [];
                        s11 = peg$parseWSB();
                        while (s11 !== peg$FAILED) {
                          s10.push(s11);
                          s11 = peg$parseWSB();
                        }
                        if (s10 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 125) {
                            s11 = peg$c72;
                            peg$currPos++;
                          } else {
                            s11 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c73); }
                          }
                          if (s11 !== peg$FAILED) {
                            s12 = [];
                            s13 = peg$parseWSB();
                            while (s13 !== peg$FAILED) {
                              s12.push(s13);
                              s13 = peg$parseWSB();
                            }
                            if (s12 !== peg$FAILED) {
                              peg$reportedPos = s0;
                              s1 = peg$c74(s4, s8);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c6;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c6;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c6;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c6;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c6;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c6;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c6;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c6;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c6;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c6;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c6;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c6;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parseWSB();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseWSB();
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseLET();
          if (s2 !== peg$FAILED) {
            s3 = [];
            s4 = peg$parseWSB();
            if (s4 !== peg$FAILED) {
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parseWSB();
              }
            } else {
              s3 = peg$c6;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseVAR();
              if (s4 !== peg$FAILED) {
                s5 = [];
                s6 = peg$parseWSB();
                if (s6 !== peg$FAILED) {
                  while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    s6 = peg$parseWSB();
                  }
                } else {
                  s5 = peg$c6;
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseVAR();
                  if (s6 !== peg$FAILED) {
                    s7 = [];
                    s8 = peg$parseWSB();
                    while (s8 !== peg$FAILED) {
                      s7.push(s8);
                      s8 = peg$parseWSB();
                    }
                    if (s7 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 61) {
                        s8 = peg$c75;
                        peg$currPos++;
                      } else {
                        s8 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c76); }
                      }
                      if (s8 !== peg$FAILED) {
                        s9 = [];
                        s10 = peg$parseWSB();
                        while (s10 !== peg$FAILED) {
                          s9.push(s10);
                          s10 = peg$parseWSB();
                        }
                        if (s9 !== peg$FAILED) {
                          s10 = peg$parseObject();
                          if (s10 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c77(s4, s6, s10);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c6;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c6;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c6;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c6;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c6;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c6;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c6;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c6;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c6;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c6;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parseWSB();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parseWSB();
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseComment();
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parseWSB();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parseWSB();
              }
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c38();
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c6;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c6;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c6;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parseWSB();
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parseWSB();
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseLET();
              if (s2 !== peg$FAILED) {
                s3 = [];
                s4 = peg$parseWSB();
                if (s4 !== peg$FAILED) {
                  while (s4 !== peg$FAILED) {
                    s3.push(s4);
                    s4 = peg$parseWSB();
                  }
                } else {
                  s3 = peg$c6;
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseVAR();
                  if (s4 !== peg$FAILED) {
                    s5 = [];
                    s6 = peg$parseWSB();
                    while (s6 !== peg$FAILED) {
                      s5.push(s6);
                      s6 = peg$parseWSB();
                    }
                    if (s5 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 61) {
                        s6 = peg$c75;
                        peg$currPos++;
                      } else {
                        s6 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c76); }
                      }
                      if (s6 !== peg$FAILED) {
                        s7 = [];
                        s8 = peg$parseWSB();
                        while (s8 !== peg$FAILED) {
                          s7.push(s8);
                          s8 = peg$parseWSB();
                        }
                        if (s7 !== peg$FAILED) {
                          s8 = peg$parseObject();
                          if (s8 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c78(s4, s8);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c6;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c6;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c6;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c6;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c6;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c6;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c6;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c6;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = [];
              s2 = peg$parseWSB();
              while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$parseWSB();
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parseMAP();
                if (s2 !== peg$FAILED) {
                  s3 = [];
                  s4 = peg$parseWSB();
                  while (s4 !== peg$FAILED) {
                    s3.push(s4);
                    s4 = peg$parseWSB();
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = [];
                    if (peg$c79.test(input.charAt(peg$currPos))) {
                      s5 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c80); }
                    }
                    if (s5 !== peg$FAILED) {
                      while (s5 !== peg$FAILED) {
                        s4.push(s5);
                        if (peg$c79.test(input.charAt(peg$currPos))) {
                          s5 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s5 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c80); }
                        }
                      }
                    } else {
                      s4 = peg$c6;
                    }
                    if (s4 !== peg$FAILED) {
                      s5 = [];
                      s6 = peg$parseWSB();
                      while (s6 !== peg$FAILED) {
                        s5.push(s6);
                        s6 = peg$parseWSB();
                      }
                      if (s5 !== peg$FAILED) {
                        s6 = [];
                        if (peg$c34.test(input.charAt(peg$currPos))) {
                          s7 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s7 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c35); }
                        }
                        if (s7 !== peg$FAILED) {
                          while (s7 !== peg$FAILED) {
                            s6.push(s7);
                            if (peg$c34.test(input.charAt(peg$currPos))) {
                              s7 = input.charAt(peg$currPos);
                              peg$currPos++;
                            } else {
                              s7 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c35); }
                            }
                          }
                        } else {
                          s6 = peg$c6;
                        }
                        if (s6 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c81(s2, s4, s6);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c6;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c6;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c6;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c6;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c6;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c6;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = [];
                s2 = peg$parseWSB();
                while (s2 !== peg$FAILED) {
                  s1.push(s2);
                  s2 = peg$parseWSB();
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseUNMAP();
                  if (s2 !== peg$FAILED) {
                    s3 = [];
                    s4 = peg$parseWSB();
                    while (s4 !== peg$FAILED) {
                      s3.push(s4);
                      s4 = peg$parseWSB();
                    }
                    if (s3 !== peg$FAILED) {
                      s4 = [];
                      if (peg$c82.test(input.charAt(peg$currPos))) {
                        s5 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c83); }
                      }
                      if (s5 !== peg$FAILED) {
                        while (s5 !== peg$FAILED) {
                          s4.push(s5);
                          if (peg$c82.test(input.charAt(peg$currPos))) {
                            s5 = input.charAt(peg$currPos);
                            peg$currPos++;
                          } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c83); }
                          }
                        }
                      } else {
                        s4 = peg$c6;
                      }
                      if (s4 !== peg$FAILED) {
                        s5 = [];
                        s6 = peg$parseWSB();
                        while (s6 !== peg$FAILED) {
                          s5.push(s6);
                          s6 = peg$parseWSB();
                        }
                        if (s5 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c84(s2, s4);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c6;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c6;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c6;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c6;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c6;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = [];
                  s2 = peg$parseWSB();
                  while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    s2 = peg$parseWSB();
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseSET();
                    if (s2 !== peg$FAILED) {
                      s3 = [];
                      s4 = peg$parseWSB();
                      if (s4 !== peg$FAILED) {
                        while (s4 !== peg$FAILED) {
                          s3.push(s4);
                          s4 = peg$parseWSB();
                        }
                      } else {
                        s3 = peg$c6;
                      }
                      if (s3 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c85) {
                          s4 = peg$c85;
                          peg$currPos += 2;
                        } else {
                          s4 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c86); }
                        }
                        if (s4 !== peg$FAILED) {
                          s5 = peg$parseVAR();
                          if (s5 !== peg$FAILED) {
                            s6 = [];
                            s7 = peg$parseWS();
                            while (s7 !== peg$FAILED) {
                              s6.push(s7);
                              s7 = peg$parseWS();
                            }
                            if (s6 !== peg$FAILED) {
                              peg$reportedPos = s0;
                              s1 = peg$c87(s5);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c6;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c6;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c6;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c6;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c6;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c6;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = [];
                    s2 = peg$parseWSB();
                    while (s2 !== peg$FAILED) {
                      s1.push(s2);
                      s2 = peg$parseWSB();
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parseSET();
                      if (s2 !== peg$FAILED) {
                        s3 = [];
                        s4 = peg$parseWSB();
                        if (s4 !== peg$FAILED) {
                          while (s4 !== peg$FAILED) {
                            s3.push(s4);
                            s4 = peg$parseWSB();
                          }
                        } else {
                          s3 = peg$c6;
                        }
                        if (s3 !== peg$FAILED) {
                          s4 = peg$currPos;
                          peg$silentFails++;
                          if (input.substr(peg$currPos, 2) === peg$c85) {
                            s5 = peg$c85;
                            peg$currPos += 2;
                          } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c86); }
                          }
                          peg$silentFails--;
                          if (s5 === peg$FAILED) {
                            s4 = peg$c5;
                          } else {
                            peg$currPos = s4;
                            s4 = peg$c6;
                          }
                          if (s4 !== peg$FAILED) {
                            s5 = peg$parseVAR();
                            if (s5 !== peg$FAILED) {
                              s6 = [];
                              s7 = peg$parseWS();
                              while (s7 !== peg$FAILED) {
                                s6.push(s7);
                                s7 = peg$parseWS();
                              }
                              if (s6 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c88(s5);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c6;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c6;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c6;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c6;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c6;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c6;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = [];
                      s2 = peg$parseWSB();
                      while (s2 !== peg$FAILED) {
                        s1.push(s2);
                        s2 = peg$parseWSB();
                      }
                      if (s1 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 92) {
                          s2 = peg$c36;
                          peg$currPos++;
                        } else {
                          s2 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c37); }
                        }
                        if (s2 !== peg$FAILED) {
                          s3 = [];
                          s4 = peg$parseWSB();
                          while (s4 !== peg$FAILED) {
                            s3.push(s4);
                            s4 = peg$parseWSB();
                          }
                          if (s3 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c38();
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c6;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c6;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c6;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }


      function extend(a, b) {
        for (var key in b) {
          if (key === 'MAPPINGS') {
            a.MAPPINGS = a.MAPPINGS || '';
            a.MAPPINGS += '\n' + b.MAPPINGS;
          } else if (typeof a[key] === 'object' && typeof b[key] === 'object' && !Array.isArray(b)) {
            extend(a[key], b[key]);
          } else {
            a[key] = b[key];
          }
        }
      }
      function parseScope(a) {
        var OBJ = {};
        if (Array.isArray(a)) {
          a.forEach(function(e) {
            extend(OBJ, e);
          });
        } else {
          extend(OBJ, a);
        }
        return OBJ;
      }


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();
